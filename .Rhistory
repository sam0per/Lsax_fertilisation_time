q()
plot(ve
q()
rm(list = ls())
new_opt <- function(bp1, bp2){
new_opt <- function(bp1, bp2){
vert_x <- sample(c(0,5,10), size = 100, replace = T)
vert_y <- sample(c(0,4,0), size = 100, replace = T)
new_bpx <- vert_x + 0.5*(bp1 - vert_x)
new_bpy <- vert_y + 0.5*(bp2 - vert_y)
return(c(new_bpx, new_bpy)
}
new_opt <- function(bp1, bp2){
vert_x <- sample(c(0,5,10), size = 100, replace = T)
vert_y <- sample(c(0,4,0), size = 100, replace = T)
new_bpx <- vert_x + 0.5*(bp1 - vert_x)
new_bpy <- vert_y + 0.5*(bp2 - vert_y)
return(new_bpx)
}
new_opt(2.5, 1.1)
rm(list = ls())
vert_x <- c(0,5,10)
vert_y <- c(0,4,0)
plot(vert_x, vert_y, las=1, bty='n', yaxt='n')
new_opt <- function(bp1, bp2){
vert_x <- sample(c(0,5,10), size = 100, replace = T)
vert_y <- sample(c(0,4,0), size = 100, replace = T)
new_bpx <- vert_x + 0.5*(bp1 - vert_x)
new_bpy <- vert_y + 0.5*(bp2 - vert_y)
return(points(new_bpx, new_bpy, pch='.'))
}
new_opt(2.5, 1.1)
rm(list = ls())
vert_x <- c(0,5,10)
vert_y <- c(0,4,0)
bp <- c(2.5, 1.1)
vert_x <- sample(c(0,5,10), size = 100, replace = T)
vert_y <- sample(c(0,4,0), size = 100, replace = T)
vert_x[1] + 0.5*(bp[1] - vert_x[1])
vert_y[1] + 0.5*(bp[2] - vert_y[1])
vert_x[1] + 0.5*(6.25 - vert_x[1])
vert_y[1] + 0.5*(0.55 - vert_y[1])
vert_x[1] + 0.5*(8.125 - vert_x[1])
vert_y[1] + 0.5*(0.275 - vert_y[1])
vert_x[2] + 0.5*(6.25 - vert_x[2])
rm(list = ls())
q()
Reduce(5, 6, '+')
cadd <- function(x) Reduce("+", x, accumulate = TRUE)
cadd(seq_len(7))
seq_len(7)
vert_x <- c(0,5,10)
vert_y <- c(0,4,0)
bp <- c(2.5, 1.1)
fun <- function(x, y) { return(0.5 * (x + y)) }
x2 <- Reduce(fun, vert_x, init = bp[1], accumulate = T)
y2 <- Reduce(fun, vert_y, init = bp[2], accumulate = T)
plot(vert_x, vert_y, las=1, bty='n', yaxt='n')
points(x2, y2, pch = ".")
max_iter <- 10000
vert_idx <- sample(c(1:3), size = max_iter, replace = T)
vert_x <- vert_x[vert_idx]
vert_y <- vert_y[vert_idx]
fun <- function(x, y) { return(0.5 * (x + y)) }
x2 <- Reduce(fun, vert_x, init = bp[1], accumulate = T)
y2 <- Reduce(fun, vert_y, init = bp[2], accumulate = T)
plot(vert_x, vert_y, las=1, bty='n', yaxt='n')
points(x2, y2, pch = ".")
vert_x <- c(0,5,10)
vert_y <- c(0,4,0)
plot(vert_x, vert_y, las=1, bty='n', yaxt='n')
bp <- c(2.5, 1.1)
points(bp[1], bp[2], pch=.)
max_iter <- 10000
vert_idx <- sample(c(1:3), size = max_iter, replace = T)
vert_x <- vert_x[vert_idx]
vert_y <- vert_y[vert_idx]
for (i in 1:max_iter) {
new_bpx <- vert_x[i] + 0.5*(bp[1] - vert_x[i])
new_bpy <- vert_y[i] + 0.5*(bp[2] - vert_y[i])
bp <- c(new_bpx, new_bpy)
points(new_bpx, new_bpy, pch='.')
}
vert_x <- c(0,5,10)
vert_y <- c(0,4,0)
plot(vert_x, vert_y, las=1, bty='n', yaxt='n')
bp <- c(2.5, 1.1)
points(bp[1], bp[2], pch=.)
max_iter <- 10000
vert_idx <- sample(c(1:3), size = max_iter, replace = T)
vert_x <- vert_x[vert_idx]
vert_y <- vert_y[vert_idx]
for (i in 1:max_iter) {
new_bpx <- vert_x[i] + 0.5*(bp[1] - vert_x[i])
new_bpy <- vert_y[i] + 0.5*(bp[2] - vert_y[i])
bp <- c(new_bpx, new_bpy)
points(new_bpx, new_bpy, pch='.')
}
fun <- function(x, y) { return(0.5 * (x - y)) }
x2 <- Reduce(fun, vert_x, init = bp[1], accumulate = T)
y2 <- Reduce(fun, vert_y, init = bp[2], accumulate = T)
plot(vert_x, vert_y, las=1, bty='n', yaxt='n')
points(x2, y2, pch = ".")
fun <- function(x, y) { return(0.5 * (x + y)) }
x2 <- Reduce(fun, vert_x, init = bp[1], accumulate = T)
y2 <- Reduce(fun, vert_y, init = bp[2], accumulate = T)
plot(vert_x, vert_y, las=1, bty='n', yaxt='n')
points(x2, y2, pch = ".")
vert_x <- c(0,5,10)
vert_y <- c(0,4,0)
plot(vert_x, vert_y, las=1, bty='n', yaxt='n')
bp <- c(2.5, 1.1)
points(bp[1], bp[2], pch=.)
max_iter <- 10000
vert_idx <- sample(c(1:3), size = max_iter, replace = T)
vert_x <- vert_x[vert_idx]
vert_y <- vert_y[vert_idx]
for (i in 1:max_iter) {
new_bpx <- vert_x[i] + 0.5*(bp[1] - vert_x[i])
new_bpy <- vert_y[i] + 0.5*(bp[2] - vert_y[i])
bp <- c(new_bpx, new_bpy)
points(new_bpx, new_bpy, pch='.')
}
q()
q()
# List of packages for session
.packages = c("styler", "lintr", "rstan", "Roxygen", "knitr", "bayesplot", "rstanarm", "shinystan",
"tidyr", "loo", "dplyr", "ggplot2", "purrr", "reshape2", "gridExtra", "rstantools")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
lapply(.packages, require, character.only=TRUE)
# List of packages for session
.packages = c("styler", "lintr", "rstan", "roxygen2", "knitr", "bayesplot", "rstanarm", "shinystan",
"tidyr", "loo", "dplyr", "ggplot2", "purrr", "reshape2", "gridExtra", "rstantools")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
lapply(.packages, require, character.only=TRUE)
q()
q()
devtools::install_github('RLesur/Rcade')
Rcade::games
Rcade::games$`2048`
Rcade::games
Rcade::games$BoulderDash
Rcade::games$BoulderDash
Rcade::games
Rcade::games$CathTheEgg
Rcade::games$Core
Rcade::games
Rcade::games$Pacman
Rcade::games$GreenMahjong
Rcade::games$Pond
q()
13 × cos( 22.6° )
13 * cos( 22.6° )
13 * cos( 22.6)
cos( 22.6)
cos(22)
cos(90)
cos(22.6*pi/180)
cos(22.6*pi/180) * 13
sin(22.6*pi/180) * 13
TS = read.table("Desktop/Lfab.LOKs.201811.raw", header = FALSE, sep = "=")
View(TS)
library(dplyr)
TS %>%
arrange(V1)
setNames(data.frame(t(TS[,-1])), TS[,1])
TS[,-1]
TS[,1]
TS %>%
arrange(V1) %>%
filter(V1==5)
TS %>%
arrange(V1) %>%
filter(V1==5, V1==9)
TS %>%
arrange(V1) %>%
filter(V1==5 | V1==9)
TS %>%
arrange(V1) %>%
filter(V1==5 | V1==7 | V1==9 )
TSsub = TS %>%
arrange(V1) %>%
filter(V1==5 | V1==7 | V1==9 )
tmydf = setNames(data.frame(t(TSsub[,-1])), TSsub[,1])
as.data.frame(t(TSsub[,-1]))
TSsub[,-1]
View(TSsub)
t(TSsub[,-1])
TSsub$V2
tibble(ID = TSsub$V2[TSsub$V1==5])
tibble(ID = TSsub$V2[TSsub$V1==5], Angle = TSsub$V2[TSsub$V1==7])
TSsub$V2[TSsub$V1==7]
TSsub = TS %>%
arrange(V1) %>%
filter(V1==5 | V1==7 | V1==9 ) %>%
group_by(V1) %>%
summarise(num=n())
TSsub
TSsub = TS %>%
arrange(V1) %>%
filter(V1==5 | V1==7 | V1==9 )
TS = TS[-1,]
TS = read.table("Desktop/Lfab.LOKs.201811.raw", header = FALSE, sep = "=")
TSsub = TS %>%
arrange(V1) %>%
filter(V1==5 | V1==7 | V1==9 )
TSsub = TSsub[-1,]
TSsub %>%
group_by(V1) %>%
summarise(num=n())
tibble(ID = TSsub$V2[TSsub$V1==5], Angle = TSsub$V2[TSsub$V1==7])
tibble(ID = TSsub$V2[TSsub$V1==5], Angle = TSsub$V2[TSsub$V1==7],
Dist=TSsub$V2[TSsub$V1==9])
TS_polar = tibble(ID = TSsub$V2[TSsub$V1==5], Angle = TSsub$V2[TSsub$V1==7],
Dist=TSsub$V2[TSsub$V1==9])
pol2cart = function(dist, angle, TS) {
TS$x = cos(angle * pi/180) * dist
TS$y = sin(angle * pi/180) * dist
}
pol2cart(dist = TS_polar$Dist, angle = TS_polar$Angle, TS = TS_polar)
TS_polar = tibble(ID = TSsub$V2[TSsub$V1==5], Angle = as.numeric(TSsub$V2[TSsub$V1==7]),
as.numeric(Dist=TSsub$V2[TSsub$V1==9]))
as.numeric(TSsub$V2[TSsub$V1==7])
as.numeric(Dist=TSsub$V2[TSsub$V1==9])
TSsub$V2[TSsub$V1==9]
as.numeric(TSsub$V2)
as.numeric(TS_polar$Dist)
View(TS_polar)
as.numeric(TS_polar$Angle)
as.character(TS_polar$Dist)
character(TS_polar$Angle)
as.character(TS_polar$Angle)
TS_polar = tibble(ID = TSsub$V2[TSsub$V1==5], Angle = as.character(TSsub$V2[TSsub$V1==7]),
as.character(Dist=TSsub$V2[TSsub$V1==9]))
TS_polar$Dist = as.character(TS_polar$Dist)
TS_polar$Angle = as.character(TS_polar$Angle)
as.numeric(TS_polar$Dist)
as.numeric(TS_polar$Angle)
TS_polar$Dist = as.numeric(TS_polar$Dist)
TS_polar$Angle = as.numeric(TS_polar$Angle)
pol2cart = function(dist, angle, TS) {
TS$x = cos(angle * pi/180) * dist
TS$y = sin(angle * pi/180) * dist
}
pol2cart(dist = TS_polar$Dist, angle = TS_polar$Angle, TS = TS_polar)
pol2cart = function(dist, angle, TS) {
TS$x = cos(angle * pi/180) * dist
TS$y = sin(angle * pi/180) * dist
return(TS)
}
pol2cart(dist = TS_polar$Dist, angle = TS_polar$Angle, TS = TS_polar)
TS_cart = pol2cart(dist = TS_polar$Dist, angle = TS_polar$Angle, TS = TS_polar)
plot(TS_cart$x, TS_cart$y)
View(TS_polar)
text(TS_cart$x, TS_cart$y, TS_cart$ID, cex=0.6, pos=4, col="red")
plot(TS_cart$x, -TS_cart$y)
text(TS_cart$x, -TS_cart$y, TS_cart$ID, cex=0.6, pos=4, col="red")
TS_polar
TS_polar = TS_polar[-1,]
TS_cart = pol2cart(dist = TS_polar$Dist, angle = TS_polar$Angle, TS = TS_polar)
plot(TS_cart$x, -TS_cart$y)
text(TS_cart$x, -TS_cart$y, TS_cart$ID, cex=0.6, pos=4, col="red")
TSsub
TS
TS %>%
mutate(ID = filter(V1==5))
TS %>%
mutate(ID = V1)
TS %>%
mutate(ID = V1[V1==5])
V1[V1==5]
TS_polar
TS_cart
write.table(TS_cart, "Documents/research/projects/LOK_Lfab/Lfab.LOKs.201811.csv",
row.names = FALSE, quote = FALSE, sep = ";")
rm(list = ls())
TS = read.table("Documents/research/projects/LOK_Lfab/data/Lfab.LOKn.201811.raw",
header = FALSE, sep = "=")
TSsub = TS %>%
arrange(V1) %>%
filter(V1==5 | V1==7 | V1==9 )
TSsub
View(TS)
TSsub %>%
group_by(V1) %>%
summarise(num=n())
TS_polar = tibble(ID = TSsub$V2[TSsub$V1==5], Angle = as.character(TSsub$V2[TSsub$V1==7]),
as.character(Dist=TSsub$V2[TSsub$V1==9]))
TSsub$V2[TSsub$V1==5]
as.character(TSsub$V2[TSsub$V1==7])
TSsub$V2[TSsub$V1==9]
as.character(Dist=TSsub$V2[TSsub$V1==9])
TS_polar = tibble(ID = TSsub$V2[TSsub$V1==5], Angle = as.character(TSsub$V2[TSsub$V1==7]),
Dist=TSsub$V2[TSsub$V1==9])
TS_polar
as.character(TS_polar$Dist)
TS_polar$Dist = as.character(TS_polar$Dist)
as.character(TS_polar$Angle)
TS_polar$Angle = as.character(TS_polar$Angle)
TS_polar$Dist = as.numeric(TS_polar$Dist)
TS_polar$Angle = as.numeric(TS_polar$Angle)
TS_polar
pol2cart = function(dist, angle, TS) {
TS$x = cos(angle * pi/180) * dist
TS$y = sin(angle * pi/180) * dist
return(TS)
}
TS_cart = pol2cart(dist = TS_polar$Dist, angle = TS_polar$Angle, TS = TS_polar)
plot(TS_cart$x, -TS_cart$y)
text(TS_cart$x, -TS_cart$y, TS_cart$ID, cex=0.6, pos=4, col="red")
write.table(TS_cart, "Documents/research/projects/LOK_Lfab/data/Lfab.LOKn.201811.csv",
row.names = FALSE, quote = FALSE, sep = ";")
rm(list = ls())
q()
Rcade::games$Mariohtml5
q()
TS_cart_N = read.csv("Documents/research/projects/LOK_Lfab_201811/data/Lfab.LOKn.201811.csv", sep = ";")
TS_cart_S = read.csv("Documents/research/projects/LOK_Lfab_201811/data/Lfab.LOKs.201811.csv", sep = ";")
library(ggpubr)
plot(TS_cart_N$x, -TS_cart_N$y, pch=21)
plot(TS_cart_N$x, -TS_cart_N$y, pch=19)
plot(TS_cart_N$x, -TS_cart_N$y, pch=19, cex=0.8)
plot(TS_cart_N$x, -TS_cart_N$y, pch=19, cex=0.6)
plot(TS_cart_N$x, -TS_cart_N$y, pch=19, cex=0.6)
text(TS_cart_N$x, -TS_cart_N$y, TS_cart_N$ID, cex=0.4, pos=4, col="red")
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=4, col="red")
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=2, col="red")
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=-2, col="red")
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=5, col="red")
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=1, col="red")
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=1, col="red", srt=90)
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=3, col="red", srt=90)
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=2, col="red", srt=90)
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=2, col="red", srt=110)
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=2, col="red", srt=75)
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=4, col="red", srt=75)
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=3, col="red", srt=75)
plot(TS_cart_S$x, -TS_cart_S$y, pch=19, cex=0.6)
text(TS_cart_S$x, -TS_cart_S$y, TS_cart_S$ID, cex=0.4, pos=3.5, col="red", srt=75)
rm(list = ls())
q()
q()
q()
help('pareto-k-diagnostic')
hyp_mod = read.table("Documents/research/projects/2.mating/model_path.txt")
hyp_mod
basename(hyp_mod[1,])
as.character(hyp_mod[1,])
basename(as.character(hyp_mod[1,]))
rm(list = ls())
q()
Rdf = read.csv("Downloads/Oresund_loci_zero.csv")
Rdf[1:10,1:10]
Rdf[1:3,1:3]
Rdf[1:4,1:4]
Rdf_ss = Rdf[-1:-2,]
Rdf_ss[1:4,1:4]
Rdf = read.csv("Downloads/Oresund_loci_zero.csv", header = FALSE)
Rdf[1:4,1:4]
Rdf_ss = Rdf[-1:-2,]
Rdf_ss[1:4,1:4]
Rdf_ss[1,]
Rdf_ss[2,1:10]
Rdf_ss[1:4,1:4]
Rdf_ss[3,1:10]
Rdf_ss[1,1:10]
as.character(Rdf_ss[1,1:10])
Rdf = read.csv("Downloads/Oresund_loci_zero.csv")
Rdf[1:4,1:4]
Rdf[1:4,1:6]
colnames(Rdf)[1:3]
colnames(Rdf)[1:7]
col_ex = colnames(Rdf)[1:7]
col_ex
grepl(pattern = "X", x = col_ex)
!grepl(pattern = "X", x = col_ex)
col_ex[!grepl(pattern = "X", x = col_ex)]
col_ex
colnames(Rdf)[1:7]
colnames(Rdf)[1:7][-1:-2]
col_ex = colnames(Rdf)[1:7][-1:-2]
col_ex = colnames(Rdf)[1:8][-1:-2]
col_ex
col_ex[grepl(pattern = "X", x = col_ex)]
col_x2 = col_ex[grepl(pattern = "X", x = col_ex)]
col_loc = col_ex[!grepl(pattern = "X", x = col_ex)]
col_loc
col_x2
seq_along(col_loc)
paste0(col_loc, ".1")
col_loc1 = paste0(col_loc, ".1")
col_loc2 = paste0(col_loc, ".2")
col_loc2
col_loc1
col_loc_all = sort(c(col_loc1, col_loc1))
col_loc_all
col_loc1 = paste0(col_loc, ".1")
col_loc2 = paste0(col_loc, ".2")
col_loc_all = sort(c(col_loc1, col_loc2))
col_loc_all
colnames(Rdf)[1:8][-1:-2]
colnames(Rdf)[1:8][-1:-2] = col_loc_all
Rdf[1:4,1:8]
Rdf = read.csv("Downloads/Oresund_loci_zero.csv")
col_ex = colnames(Rdf)[-1:-2]
col_loc = col_ex[!grepl(pattern = "X", x = col_ex)]
col_loc1 = paste0(col_loc, ".1")
col_loc2 = paste0(col_loc, ".2")
col_loc_all = sort(c(col_loc1, col_loc2))
colnames(Rdf)[-1:-2] = col_loc_all
Rdf[1:4,1:8]
rm(list = ls())
Rdf = read.csv("Downloads/Oresund_loci_zero.csv")
col_ex = colnames(Rdf)[-1:-2]
col_loc = col_ex[!grepl(pattern = "X", x = col_ex)]
Rdf_ss = Rdf[, col_loc]
colnames(Rdf_ss)[1:3]
Rdf[1:4,1:8]
colnames(Rdf_ss)[1:3]
colnames(Rdf_ss) = paste0(col_loc, ".1")
col_xloc = col_ex[grepl(pattern = "X", x = col_ex)]
Rdf_ssx = Rdf[, col_xloc]
colnames(Rdf_ssx) = paste0(col_xloc, ".2")
colnames(Rdf_ssx)[1:4]
colnames(Rdf_ssx) = paste0(col_loc, ".2")
colnames(Rdf_ssx)[1:4]
colnames(Rdf_ss)[1:4]
Rdf_new = cbind(Rdf[, 1:2], Rdf_ss, Rdf_ssx)
Rdf_new[1:4, 1:6]
Rdf_new = cbind(Rdf_ss, Rdf_ssx)
rm(list = ls())
Rdf = read.csv("Downloads/Oresund_loci_zero.csv")
col_ex = colnames(Rdf)[-1:-2]
col_loc = col_ex[!grepl(pattern = "X", x = col_ex)]
Rdf_ss = Rdf[, col_loc]
colnames(Rdf_ss) = paste0(col_loc, ".1")
col_xloc = col_ex[grepl(pattern = "X", x = col_ex)]
Rdf_ssx = Rdf[, col_xloc]
colnames(Rdf_ssx) = paste0(col_loc, ".2")
colnames(Rdf_ssx)[1:4]
colnames(Rdf_ss)[1:4]
Rdf_new = cbind(Rdf_ss, Rdf_ssx)
Rdf_sort = Rdf_new[ , order(names(Rdf_new))]
Rdf_sort[1:4, 1:6]
Rdf_old = Rdf[ , order(names(Rdf))]
Rdf[1:4,1:8]
Rdf = read.csv("Downloads/Oresund_loci_zero.csv")
Rdf$locus100023_16[1:5]
Rdf[1:5, 5:6]
Rdf_sort$locus79176_26.1
Rdf_sort$locus79176_26.1[1:5]
Rdf[1:5, 5:6]
Rdf_sort$locus79176_26.1[1:5]
Rdf_sort$locus79176_26.2[1:5]
Rdf_fin = cbind(Rdf[,1:2], Rdf_sort)
Rdf_sort[1:4, 1:6]
Rdf_fin[1:4, 1:6]
sprintf("%02d:%02d", 12, 3)
sprintf("%02d", 3)
as.integer(sprintf("%02d", 3))
write.csv(x = Rdf_fin, file = "Downloads/Oresund_loci_zero_SP.csv", row.names = FALSE)
rm(list = ls())
getwd()
q()
setwd("Documents/research/projects/Lsax_fertilisation_time/")
library(dplyr)
dt = read.csv("data/FLs_size_mm_sex_after_male.csv")
# head(dt)
dt_sex = split(dt, dt$sex)
dt_sex$female = filter(dt_sex$female, size_mm > 8.5)
dt_sex$female$fgroup = c("G1", "G5", "G30")
for (f in 1:nrow(dt_sex$female)) {
success=FALSE
i=1
f_log = log(dt_sex$female$size_mm[f])
while (!success) {
m_row = sample_n(dt_sex$male, size = 1)
m_idx = which(dt_sex$male$snail_ID==m_row[,"snail_ID"])
m_log = log(m_row[,"size_mm"])
or = round(f_log - m_log, 1)
# cat(or, "\n")
success = (or >= 0.2 & or <= 0.4)
i = i + 1
if (or >= 0.2 & or <= 0.4) {
cat("Female ID", dt_sex$female$snail_ID[f], "matched with male ID", m_row[,"snail_ID"], "in time group",
dt_sex$female$fgroup[f], "\n")
dt_sex$male = dt_sex$male[-m_idx,]
}
}
}
24+18
log(11)-log(7)
log(11)-log(7.5)
log(9)-log(6)
rm(list = ls())
q()
